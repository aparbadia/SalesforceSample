

/////////////// Copy  Billing to Shipping Address

trigger AccountAddressTrigger on Account (before insert, before update) {
    for(Account a : Trigger.New) {
        
        if (a.Match_Billing_Address__c) {
            a.ShippingStreet = a.BillingStreet;
            a.ShippingCity = a.BillingCity;
            a.ShippingPostalCode = a.BillingPostalCode;
            a.ShippingState = a.BillingState;
        }
        
    }
    
    
}


/////////// Prevents to Delete Account with Oppty

trigger AccountDeletion on Account (before delete) {
   
    // Prevent the deletion of accounts if they have related contacts.
    for (Account a : [SELECT Id FROM Account
                     WHERE Id IN (SELECT AccountId FROM Opportunity) AND
                     Id IN :Trigger.old]) {
        Trigger.oldMap.get(a.Id).addError(
            'Cannot delete account with related opportunities.');
    }
    
}


/////////////////////// Adding Related record Oppty in Account Creation

trigger AddRelatedRecord on Account(after insert, after update) {
    List<Opportunity> oppList = new List<Opportunity>();
    
    // Add an opportunity for each account if it doesn't already have one.
    // Iterate over accounts that are in this trigger but that don't have opportunities.
    for (Account a : [SELECT Id,Name FROM Account
                     WHERE Id IN :Trigger.New AND
                     Id NOT IN (SELECT AccountId FROM Opportunity)]) {
        // Add a default opportunity for this account
        oppList.add(new Opportunity(Name=a.Name + ' Opportunity',
                                   StageName='Prospecting',
                                   CloseDate=System.today().addMonths(1),
                                   AccountId=a.Id)); 
    }
    
    if (oppList.size() > 0) {
        insert oppList;
    }
}


////////////////////////////// Adding Related Task when Oppty updated to Closed

trigger ClosedOpportunityTrigger on Opportunity (after insert, after update) {

    List<Task> tasklist = new List<Task>();
    
    for( Opportunity opp : [Select Id from Opportunity where Id in :Trigger.New AND StageName = 'Closed Won'] ) {  
       
        tasklist.add(new Task( WhatId = opp.Id, Subject = 'Follow Up Test Task'));
     }
                  
     if (tasklist.size() > 0) {
        insert tasklist;
    }  
    
}


/////////////  Validation, Name should not be  UNKNOWN

trigger RestrictContactByName on Contact (before insert, before update) {
	
	//check contacts prior to insert or update for invalid data
	For (Contact c : Trigger.New) {
		if(c.LastName == 'UNKNOWN') {	//invalidname is invalid
			c.AddError('The Last Name "'+c.LastName+'" is not allowed for DML');
		}

	}



}

/////////////////// DML Opertation

trigger DmlTriggerBulk on Account(after update) {  
 
    // Get the related opportunities for the accounts in this trigger.    
    
    List<Opportunity> relatedOpps = [SELECT Id,Name,Probability FROM Opportunity WHERE AccountId IN :Trigger.New];
          
    List<Opportunity> oppsToUpdate = new List<Opportunity>();         // Iterate over the related opportunities

    for(Opportunity opp : relatedOpps) {      
        // Update the description when probability is greater 
        // than 50% but less than 100% 
        if ((opp.Probability >= 50) && (opp.Probability < 100)) {
            opp.Description = 'New description for opportunity.';
            oppsToUpdate.add(opp);
        }
    }
    
    // Perform DML on a collection
    update oppsToUpdate;
}

